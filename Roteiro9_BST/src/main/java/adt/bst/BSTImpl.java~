package adt.bst;

import adt.bt.BTNode;

public class BSTImpl<T extends Comparable<T>> implements BST<T> {

	protected  BSTNode<T> root;
	
	public BSTImpl() {
		root = new BSTNode<T>();
	}

	public BSTNode<T> getRoot(){
		return this.root;
	}
	
	@Override
	public boolean isEmpty() {
		return root.isEmpty();
	}

	// what is the height for an unitary tree? o?
	@Override
	public int height() {
		if (isEmpty())
			return -1;
		else
			return heightRecursive(root);
		
		// testar para arvore unitaria
	}

	private int heightRecursive(BTNode<T> btNode) {
		if (btNode.isEmpty()) {
			return -1;
		} else {
			int heightLeft = heightRecursive(btNode.getLeft());
			int heightRight = heightRecursive(btNode.getRight());
			
			if (heightLeft > heightRight)
				return 1 + heightLeft;
			else 
				return 1 + heightRight;
		}
	}
	

	@Override
	public BSTNode<T> search(T element) {
		if (element != null) 
			return searchRecursive(root, element);
		else
			return null;
		
		// testar procurar null;
	}
	
	private BSTNode<T> searchRecursive(BSTNode<T> node, T element) {
		if (node.isEmpty() || node.getData().equals(element)) {
			return node;
		} else if (node.getData().compareTo(element) < 0) {
			return searchRecursive( (BSTNode<T>) node.getLeft(), element);
		} else {
			return searchRecursive( (BSTNode<T>) node.getRight(), element);
		}
	}

	// what about null element?
	@Override
	public void insert(T element) {
		if (isEmpty() && element != null) {
			root.setData(element);
			root.setLeft(new BSTNode<T>());
			root.setRight(new BSTNode<T>());
			
			root.getLeft().setParent(root);
			root.getRight().setParent(root);
		} else if (element != null) {
			insertRecursive(root, root, element);
		}
		// testar: inserir em vazio; inserir null; testar pais de left e right quando vazio; testar pais em outras insercoes;
	}
	
	// im importing adt.bt.BTNode; will it get any error?
	private void insertRecursive(BTNode<T> node, BTNode<T> parent, T element) {
		if (node.isEmpty()) {
			node.setData(element);
			node.setLeft(new BSTNode<T>());
			node.setRight(new BSTNode<T>());
			node.setParent(parent);
		} else {
			if (element.compareTo(node.getData()) < 0)
				insertRecursive(node.getLeft(), node, element);
			else
				insertRecursive(node.getRight(), node, element);
		}
	}

	@Override
	public BSTNode<T> maximum() {
		if (isEmpty())
			return null; // does it make sense return null when tree is empty?
		else
			return maximumRecursive(root);
	}
	
	private BSTNode<T> maximumRecursive(BTNode<T> node) {
		if (node.getRight().isEmpty())
			return (BSTNode<T>) node;
		else
			return maximumRecursive(node.getRight());
	}

	@Override
	public BSTNode<T> minimum() {
		if (isEmpty())
			return null; // does it make sense return null when tree is empty?
		else
			return (BSTNode<T>) minimumRecursive(root);
	}
	
	private BTNode<T> minimumRecursive(BTNode<T> node) {
		if (node.getLeft().isEmpty())
			return node;
		else
			return minimumRecursive(node.getLeft());
	}

	@Override
	public BSTNode<T> sucessor(T element) {
		// TODO Auto-generated method stub
		throw new RuntimeException("Not implemented yet!");
	}

	@Override
	public BSTNode<T> predecessor(T element) {
		// TODO Auto-generated method stub
		throw new RuntimeException("Not implemented yet!");
	}

	@Override
	public void remove(T element) {
		if (element != null) {
			BSTNode<T> toRemove = search(element);
			removeRecursive(toRemove, root);
		}
		
		// testar quando toRemove for igual ao root (teste para quando root tem dois filhos, tem filho so a esq, tem filho so a direita. 
	}

	private void removeRecursive(BSTNode<T>  node, BSTNode<T> root) {
		BSTNode<T> toRemove = node;
		
		if (toRemove == null || toRemove.isEmpty())
			return;
		
		// node is leave
		if (toRemove.getLeft().isEmpty() && toRemove.getRight().isEmpty()) {
			becomeNil(toRemove);
			
		// node has two children
		} else if (!toRemove.getLeft().isEmpty() && !toRemove.getRight().isEmpty() ) {
			
			BSTNode<T> sucessor = sucessor(toRemove.getData());
			toRemove.setData( sucessor.getData() );
			removeRecursive(sucessor, root);

		// node has one child
		} else {
			
			if (!toRemove.equals(root)) {
				
				// node is left child
				if (toRemove.getParent().getLeft().equals(toRemove)) {
					
					if (toRemove.getLeft().isEmpty())
						// node.right is left child of node parent
						toRemove.getParent().setLeft( toRemove.getRight() );
					else
						// node.left is left child of node parente
						toRemove.getParent().setLeft( toRemove.getLeft() );
					
				} else { // node is right child
					
					if (toRemove.getRight().isEmpty())
						// node.right is right child of node's parent
						toRemove.getParent().setRight( toRemove.getRight() );
					else
						// node.left is right child of node's parent
						toRemove.getParent().setRight( toRemove.getLeft() );
				}
			// when toRemove is equals to root
			} else { 
				
				if (!root.getRight().isEmpty()){
					toRemove = (BSTNode<T>) root.getRight();
				} else {
					toRemove = (BSTNode<T>) root.getLeft();
				}
				
				toRemove.setParent(null);
			}
			
		} // end has one child 
		
	}

	@Override
	public T[] preOrder() {
		// TODO Auto-generated method stub
		throw new RuntimeException("Not implemented yet!");
	}

	@Override
	public T[] order() {
		// TODO Auto-generated method stub
		throw new RuntimeException("Not implemented yet!");
	}

	@Override
	public T[] postOrder() {
		// TODO Auto-generated method stub
		throw new RuntimeException("Not implemented yet!");
	}

	/**
	 * This method is already implemented using recursion. You must understand how it work and 
	 * use similar idea with the other methods. 
	 */
	@Override
	public int size() {
		return size(root);
	}
	
	private int size(BSTNode<T> node){
		int result = 0;
		//base case means doing nothing (return 0)
		if(!node.isEmpty()){ //indusctive case
			result = 1 + size((BSTNode<T>)node.getLeft()) + size((BSTNode<T>)node.getRight());
		}
		return result;
	}

	private void becomeNil(BSTNode<T> node){
		node.setData(null);
		node.setLeft(new BSTNode<T>());
		node.setRight(new BSTNode<T>());
	}
}
